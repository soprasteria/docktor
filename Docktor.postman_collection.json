{
	"info": {
		"name": "Docktor",
		"_postman_id": "38808964-571e-1153-9ed0-5b6b394fb1ab",
		"description": "This collection will test the CRUD of catologServices from Docktor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "catalogServices",
			"description": "",
			"item": [
				{
					"name": "GET all catalogServices",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var data = JSON.parse(responseBody)",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable\"] = responseTime < 200; // milliseconds",
									"",
									"tests[\"ResponseBody contains version field \"] =responseBody.has(\"versions\");",
									"tests[\"ResponseBody contains tags field \"] = responseBody.has(\"tags\");",
									"tests[\"ResponseBody contains created field \"] = responseBody.has(\"created\");",
									"tests[\"ResponseBody contains updated field \"] = responseBody.has(\"updated\");",
									"",
									"// Load the JSON Schema",
									"const catalogServiceSchema = JSON.parse(environment.catalogServiceSchema);",
									"",
									"// Test whether the response matches the schema ",
									"tests[\"CatalogService is valid\"] = tv4.validate(data, catalogServiceSchema);",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InFmb3VjYXVsdCIsImV4cCI6MTUwODc2MDQ5MiwiaXNzIjoiZG9ja3RvciJ9.Lrikl1hm323SUgqz3u9Z9XRVcc9MrXn7t7cUVWwWjvI"
							},
							{
								"key": "catalogServiceSchema",
								"value": ""
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/api/catalogServices",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"catalogServices"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET catalogService by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Response time is acceptable\"] = responseTime < 200; // milliseconds",
									"",
									"tests[\"Catalog 1 contains version field \"] =responseBody.has(\"versions\");",
									"tests[\"Catalog 1 contains tags field \"] = responseBody.has(\"tags\");",
									"tests[\"Catalog 1 contains created field \"] = responseBody.has(\"created\");",
									"tests[\"Catalog 1 contains updated field \"] = responseBody.has(\"updated\");",
									"",
									"// Load the JSON Schema",
									"const catalogServiceSchema = JSON.parse(environment.catalogServiceSchema);",
									"",
									"// Test whether the response matches the schema ",
									"tests[\"CatalogService is valid\"] = tv4.validate(responseBody, catalogServiceSchema);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InFmb3VjYXVsdCIsImV4cCI6MTUwODc2MDQ5MiwiaXNzIjoiZG9ja3RvciJ9.Lrikl1hm323SUgqz3u9Z9XRVcc9MrXn7t7cUVWwWjvI"
							},
							{
								"key": "catalogServiceSchema",
								"value": ""
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/api/catalogServices/556d7fbfec20ed3a0149da39",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"catalogServices",
								"556d7fbfec20ed3a0149da39"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST new catalogService",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Successful POST request\"] = responseCode.code === 201 || responseCode.code === 202;",
									"tests[\"Response time is acceptable\"] = responseTime < 200; // milliseconds",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"tests[\"ResponseBody contains version field \"] =responseBody.has(\"versions\");",
									"tests[\"ResponseBody contains tags field \"] = responseBody.has(\"tags\");",
									"tests[\"ResponseBody contains created field \"] = responseBody.has(\"created\");",
									"tests[\"ResponseBody contains updated field \"] = responseBody.has(\"updated\");",
									"",
									"// Load the JSON Schema",
									"const catalogServiceSchema = JSON.parse(environment.catalogServiceSchema);",
									"",
									"// Test whether the response matches the schema ",
									"tests[\"CatalogService is valid\"] = tv4.validate(responseBody, catalogServiceSchema);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InFmb3VjYXVsdCIsImV4cCI6MTUwODc2MDQ5MiwiaXNzIjoiZG9ja3RvciJ9.Lrikl1hm323SUgqz3u9Z9XRVcc9MrXn7t7cUVWwWjvI"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "catalogServiceSchema",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\t{\n        \"id\": \"\",\n        \"name\": \"TEST_POST\",\n        \"versions\": null,\n        \"tags\": null,\n        \"created\": null,\n        \"updated\": null\n    }"
						},
						"url": {
							"raw": "http://localhost:8080/api/catalogServices/new",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"catalogServices",
								"new"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELET catalogService by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 204 || responseCode.code === 202;",
									"tests[\"Response time is acceptable\"] = responseTime < 200; // milliseconds",
									"",
									"tests[\"ResponseBody contains just the ID deleted\"] = responseBody === \"5469d60c05fb77a704a5a39d\";"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InFmb3VjYXVsdCIsImV4cCI6MTUwODc2MDQ5MiwiaXNzIjoiZG9ja3RvciJ9.Lrikl1hm323SUgqz3u9Z9XRVcc9MrXn7t7cUVWwWjvI"
							},
							{
								"key": "",
								"value": "",
								"disabled": true
							}
						],
						"body": {},
						"url": {
							"raw": "http://localhost:8080/api/catalogServices/556d7fbfec20ed3a0149da39",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"catalogServices",
								"556d7fbfec20ed3a0149da39"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT catalogService by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"tests[\"Successful POST request\"] = responseCode.code === 200 || responseCode.code === 204;",
									"tests[\"Response time is acceptable\"] = responseTime < 200; // milliseconds",
									"tests[\"Content-Type header is set\"] = postman.getResponseHeader(\"Content-Type\");",
									"",
									"tests[\"ResponseBody contains version field \"] =responseBody.has(\"versions\");",
									"tests[\"ResponseBody contains tags field \"] = responseBody.has(\"tags\");",
									"tests[\"ResponseBody contains created field \"] = responseBody.has(\"created\");",
									"tests[\"ResponseBody contains updated field \"] = responseBody.has(\"updated\");",
									"",
									"// Load the JSON Schema",
									"const catalogServiceSchema = JSON.parse(environment.catalogServiceSchema);",
									"",
									"// Test whether the response matches the schema ",
									"tests[\"CatalogService is valid\"] = tv4.validate(responseBody, catalogServiceSchema);",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InFmb3VjYXVsdCIsImV4cCI6MTUwODc2MDQ5MiwiaXNzIjoiZG9ja3RvciJ9.Lrikl1hm323SUgqz3u9Z9XRVcc9MrXn7t7cUVWwWjvI"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "catalogServiceSchema",
								"value": ""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"id\": \"5469af3af0ad8800016b28a8\",\n        \"name\": \"TOTO_TEST\",\n        \"versions\": null,\n        \"tags\": null,\n        \"created\": \"2014-11-20T11:23:35.091+01:00\",\n        \"updated\": \"0001-01-01T00:00:00Z\"\n    }"
						},
						"url": {
							"raw": "http://localhost:8080/api/catalogServices/5469af3af0ad8800016b28a8",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"catalogServices",
								"5469af3af0ad8800016b28a8"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}